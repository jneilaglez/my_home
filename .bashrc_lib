[[ -f ~/.bashrc_colors ]] && source ~/.bashrc_colors

function is_git ()
{
  if [[ -d .git || $(pwd) =~ .*'/.git'.* || $(git rev-parse --is-inside-work-tree 2>&1) == "true" ]]
  then
    echo -e [$(parse_git_branch)$(git_stash)]
  else
    echo ""
  fi
}

function parse_git_branch ()
{
    local GITDIR=`git rev-parse --show-toplevel 2>&1` # Get root directory of git repo
    if [[ "$GITDIR" != '/root' ]] # Don't show status of home directory repo
    then
        # Figure out the current branch, wrap in brackets and return it
        BRANCH=`git branch --no-color 2>/dev/null | sed -n '/^\*/s/^\* //p'`
        if [ -n "$BRANCH" ]; then
            echo -e $BRANCH
        fi
    else
        echo ""
    fi
}

function git_color ()
{
    # Get the status of the repo and chose a color accordingly
    local STATUS=`git status 2>&1`
    #if [[ "$STATUS" == *'Not a git repository'* ]]
    if [[ "$STATUS" == *'No es un repositorio git'* ]]
    then
        echo -e "\e[0;37m"
    else
        #if [[ "$STATUS" != *'working tree clean'* ]]
        if [[ "$STATUS" != *'el arbol de trabajo esta limpio'* ]]
        then
            # red if need to commit
            echo -e "\e[1;31m"
        else
            #if [[ "$STATUS" =~ .*'Your branch is ahead'.* ]]
            if [[ "$STATUS" =~ .*'Tu rama está adelantada'.* ]]
            then
                # yellow if need to push
                echo -e "\e[1;33m"
            else
                # else cyan
                echo -e "\e[1;36m"
            fi
        fi
    fi
}

function git_stash {
  local STASH=`git stash list | wc -l`
  if [ $STASH -gt 0 ]
  then
    echo "|♻$STASH"
  fi
}

function validate_last_command {
  LAST=$?
  if [ $LAST != "0" ]
  then
    LAST="✖"
  else
    LAST="✔"
  fi
  echo $LAST
}
